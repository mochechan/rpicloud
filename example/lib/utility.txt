
/////////////////////////////////////////////////////////////////
/*
l_safeCall = exports.safeCall = function(callback) {

	var return_value = undefined;

	if (typeof callback !== 'function') return return_value;

	// call the callback with exception catching
	try {
		var args = Array.prototype.slice.call(arguments);
		return_value = callback.apply(this, args.slice(1));
	} catch (e) {
		//console.log('safecall entering error...');
		var err_str = 'callback exception, function:\n' + callback;

		if (e.stack) err_str += '\n\n' + IC.Utility.convertString(e.stack);

		LOG.error(err_str, 'IC.Utility');

		l_notifyAdmin('script error',
			'server:\n' + IC.Utility.convertString(IC.Settings.SERVER_INFO) + '\n\n' + err_str);

		// if catch is not enable, then simply terminate program
		if (IC.Settings.SAFE_CALL === false)
		// NOTE: do not throw exception as it'll process extra messages
		//throw new Error('program terminated by error in script');
			process.exit();
	}

	return return_value;
}



//
// support for HTTP requests (GET/POST) 
//

// helper to send HTTP post request to an URL with JSON parameters
// ref: http://stackoverflow.com/questions/6158933/http-post-request-in-node-js
// onDone = function(error, res, resObj)
// url_request = 'http://somedomain.com'
// data_obj = {name: 'john', addr: '1st street'};
// content_type = ['form' | <other types> | <header object>];
// encoding = ['binary' | 'utf-8'] 
//
var l_HTTPpost = exports.HTTPpost = function(url_request, data_obj, onDone, content_type, encoding) {

	// parse the url first to extract different fields
	var parsed_url = url.parse(url_request);
	var header = undefined;

	// set default to empty object, if not specified
	if (typeof data_obj === 'undefined') {
		data_obj = {};
	}

	// Build the post string from an object to string format	
	var data = '';
	if (typeof data_obj !== 'object') {
		LOG.warn('data_obj of type: ' + typeof data_obj + ' POST now only accepts object as parameter. cannot do POST', 'IC.Utility');
		return l_safeCall(onDone, 'input not an object');
	}

	// check if a complete 'header' is provided
	if (typeof content_type === 'object') {
		header = content_type;
		LOG.sys('custom header provided: ', 'IC.Utility');
		LOG.sys(header, 'IC.Utility');
	}
	// check for form posting
	else if (content_type === 'form') {
		data = querystring.stringify(data_obj);
		content_type = 'application/x-www-form-urlencoded';
	}
	// NOTE: we default to 'application/json' type for the request parameters
	else {
		data = encodeURIComponent(JSON.stringify(data_obj));
		content_type = 'application/json';
	}

	// An object of options to indicate where to post to
	var options = {
		host: parsed_url.hostname,
		path: parsed_url.path,
		method: 'POST',
		headers: header || {
			//'Connection':	  'keep-alive',
			'content-type': content_type,
			'content-length': data.length
		}
	};

	if (parsed_url.port !== null)
		options.port = parsed_url.port;
	else {
		// fill in default port
		options.port = (url_request.indexOf('https') === 0 ? 443 : 80);
	}

	// setup server to HTTP or HTTPS
	var server = (url_request.indexOf('https') === 0 ? https : http);

	LOG.sys('HTTP POST request options:', 'IC.Utility');
	LOG.sys(options);

	// default to 'binary' but can be customized (or auto-determined by response's content-type)
	encoding = encoding || 'binary';
	
	// Set up the request
	// TODO: combine response handling with GET request
	var req = server.request(options, function (res) {

		//LOG.sys('HTTP POST request respond header:', 'IC.Utility');
		//LOG.sys(res.headers);

		
		// extract content type & make sure 'content-type' & 'Content-Type' are treated equally
		var type = res.headers['Content-Type'] || res.headers['content-type'];

		if (typeof type !== 'undefined') {
			LOG.warn('HTTP post response content-type: ' + type, 'IC.Utility');
			
			// try to determine proper encoding type automatically
			// NOTE: for images / webpages we need to have 'binary' encoding, 
			// for JSON objects we need 'utf-8' for proper Chinese display
			if (type.indexOf('application/json') >= 0) 
				encoding = 'utf-8';
		}
		
		var data = '';

		// set encoding, which can be passed in, default (binary), or determined (for application/json it's 'utf-8')
		LOG.sys('encoding: ' + encoding + ' url: ' + url_request, 'IC.Utility');
		res.setEncoding(encoding);
		
		res.on('data', function (chunk) {
			data += chunk;
		});

		res.on('end', function () {
			var res_obj = data;
			
			try {
				if (data !== '') {

					// convert JSON data (otherwise assume we can return data directly) 
					if (type.indexOf('application/json') >= 0) {
						LOG.warn('converting data (string type) to JSON...', 'IC.Utility');
						res_obj = JSON.parse(data);
					}
				}
			}
			catch (e) {
				LOG.error('JSON parsing error for data: ' + data, 'IC.Utility');
				return l_safeCall(onDone, e);
			}

			// return parsed JSON object
			l_safeCall(onDone, null, res, res_obj);
		});
	});

	req.on('error', function(e) {
		LOG.error('HTTP post error', 'IC.Utility');
		LOG.error(e, 'IC.Utility');
		LOG.error('options:', 'IC.Utility');
		LOG.error(options);
		LOG.stack();
		l_safeCall(onDone, e);

		// end request
		//req.end();
	});

	// post the data
	req.write(data);
	req.end();
}

// helper to send a HTTP get request to an URL and get response
var l_HTTPget = exports.HTTPget = function(url, onDone) {

	// send request to app server to get stat
	http.get(url, function(res) {

		// temp buffer for incoming request
		var data = '';

		res.on('data', function(chunk) {
			data += chunk;
		});

		res.on('end', function() {

			var res_obj = undefined;
			try {
				if (data !== '') {
					// see if return object is a text doc
					if (res.headers['content-type'] === 'text/html')
						res_obj = data;
					// perform parsing
					else
						res_obj = JSON.parse(data);
				}
			}
			catch (e) {
				LOG.error('JSON parsing error for data: ' + data, 'IC.Utility');
				res_obj = null;
			}

			// return parsed JSON object
			l_safeCall(onDone, res_obj);
		})

	}).on('error', function(e) {

		LOG.error("HTTP get error: " + e.message, 'IC.Utility');
		l_safeCall(onDone, null);
	});
}

// convert something to JSON (often a received message)
exports.convertJSON = function(data) {

	var JSONobj = undefined;
	try {
		if (typeof data === 'string' && data !== '')
			JSONobj = JSON.parse(data);
	} catch (e) {
		LOG.error('JSON parsing error for data: ' + data, 'IC.Utility');
		LOG.error('check if names are enclosed in double quotation such as {"name": "john"}', 'IC.Utility');
	}
	return JSONobj;
}

// convert possibly an object to string format
exports.convertString = function(obj) {
	return (typeof obj === 'object' ? JSON.stringify(obj, null, 4) : obj);
}

// extracting all legitimate emails from a string to an array
var l_extractEmails = function(text) {
	return text.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/gi);
}


var email = require('emailjs/email');
/*
format of msg:

{
   text:    "i hope this works", 
   from:    "you <username@gmail.com>", 
   to:      "someone <someone@gmail.com>, another <another@gmail.com>",
   cc:      "else <else@gmail.com>",
   bcc:		"else else <elseelse@gmail>",
   subject: "testing emailjs"
   type:	'html'
}
*/
// TODO: make email setting configurable?
exports.emailText = function(msg, onSuccess, onFail) {

	// set default sender as ImonCloud
	if (msg.hasOwnProperty('from') === false) {
		msg.from = 'ImonCloud <admin@imonology.com>';
	}

	// set default receiver as project admin
	if (msg.hasOwnProperty('to') === false || msg.to === '') {

		// if no admin mail then return
		var adminMail = IC.Utility.userSettings('adminMail');
		if (adminMail === undefined || adminMail === '') {
			var errmsg = 'No receiver for sending e-mail:\n' + 'subject: ' + msg.subject;
			LOG.warn(errmsg, 'IC.Utility');
			return l_safeCall(onFail, errmsg);
		}
		msg.to = adminMail;
	}

	//var result = msg.to.match(/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/g);

	// process recepiants to remove extra ','
	msg.to = l_extractEmails(msg.to).join(',');

	// modify message if it's an HTML message
	if (msg.type === 'html') {
		delete msg.type;
		msg.attachment = [{
			data: msg.text,
			alternative: true
		}, ]
	}

	// connect to mail server			
	// check if email config exists
	if (IC.Settings.EMAIL_CONFIG === undefined ||
		IC.Settings.EMAIL_CONFIG.user === '' ||
		IC.Settings.EMAIL_CONFIG.password === '') {
		var errmsg = 'no EMAIL_CONFIG specified for system or project, cannot send emails';
		LOG.error(errmsg, 'IC.Utility');
		return l_safeCall(onFail, errmsg);
	}

	var server = email.server.connect(IC.Settings.EMAIL_CONFIG);

	// send the message and get a callback with an error or details of the message that was sent
	server.send(msg, function(err, message) {

		if (err) {
			LOG.error('send e-mail error to: [' + msg.to + '] subject: ' + msg.subject, 'IC.Utility');
			LOG.error(err, 'IC.Utility');
			LOG.error(message, 'IC.Utility');
			l_safeCall(onFail, message);
		}
		else {
			LOG.warn('send e-mail success to: [' + msg.to + '] subject: ' + msg.subject, 'IC.Utility');
			l_safeCall(onSuccess, true);
		}
	});
}


// return a given user-defined settings, or undefined if not found
exports.userSettings = function (section, name) {
	if ((typeof g_settings !== 'undefined') && g_settings.hasOwnProperty(section)) {
		if (name !== undefined)
			return (g_settings[section].hasOwnProperty(name) ? g_settings[section][name] : undefined);
		return g_settings[section];
	}
	return undefined;
}


var ISODateString = function(d) {
	function pad(n) {
		return n < 10 ? '0' + n : n
	}

	function pad1000(n) {
		return n < 10 ? ('00' + n) : (n < 100 ? ('0' + n) : n);
	}

	// NOTE: need to add '' to force a string, otherwise it's possible to turn out a number
	return '' + d.getFullYear() +
		pad(d.getMonth() + 1) +
		pad(d.getDate()) +
		pad(d.getHours()) +
		pad(d.getMinutes()) +
		pad(d.getSeconds()) +
		pad1000(d.getMilliseconds());
}

// return a unique date time string
exports.getDateTimeString = function() {
	/* use a function for the exact format desired... */

	var d = new Date();
	return ISODateString(d);
}

// check if a directory exists or create if not
exports.validatePath = function(path) {

	if (IC.fs.existsSync(path) === false) {
		IC.sys.puts(_WARN + 'path does not exist, creating directory: ' + path + _ERREND, 'createLog');
		IC.fs.mkdirSync(path);
		return false;
	}
	return true;
}

// check if a directory exists or create if not (async version)
exports.validatePathAsync = function(path, onDone) {

	IC.fs.exists(path, function(exists) {
		if (exists)
			return l_safeCall(onDone, true);

		IC.sys.puts(_WARN + 'path does not exist, creating directory: ' + path + _ERREND, 'createLog');
		IC.fs.mkdir(path, function() {
			l_safeCall(onDone, false);
		});
	});

	// ...
}

// print out content of an error
// see: http://stackoverflow.com/questions/5802840/javascript-node-js-getting-line-number-in-try-catch
exports.dumpError = function(err) {
	var msg = '';

	if (typeof err === 'object') {
		if (err.message) {
			msg += '\nMessage: ' + err.message;
		}
		if (err.stack) {
			msg += '\nStacktrace:\n' +
				'====================\n' +
				err.stack;
		}
	}
	else {
		msg = 'dumpError :: argument is not an object';
	}

	return msg;
}

// send custom message to project admin, if "adminMail" is specified in project settings
var l_notifyAdmin = exports.notifyAdmin = function(title, msg, email) {

	// notify by e-mail if admin is provided, default to only project admin, optional emails can be added	
	email = (email || '');

	if (email !== '')
		email += ', ';
	email += (IC.Utility.userSettings('adminMail') || '');

	if (email === '')
		return false;

	var ip_port = 'unknown_server';
	if (typeof IC.Settings.FRONTIER.getHostAddress === 'function') {
		ip_port = IC.Settings.FRONTIER.getHostAddress();
		ip_port = ip_port.IP + ':' + ip_port.port;
	}

	// set server name (domain if available, default to IP + port)		
	var server_name = IC.Utility.getLocalDomain() || '';
	server_name += (' ' + ip_port);

	var content = {
		to: email,
		subject: title + ' [' + server_name + '] ',
		text: msg
	};

	IC.Utility.emailText(content);

	return true;
}

// check whether a given port is still open
// true means open, false means occupied
var l_isPortOpen = exports.isPortOpen = function(port, onResponse) {

	// client approach
	var client = IC.net.connect({
			port: port
		},
		function (result) { //'connect' listener
			if (typeof onResponse === 'function')
				onResponse(false);
			client.end();
		});
	
	client.on('error', function() {
		LOG.sys('port [' + port + '] cannot be connected... port is open...', 'IC.Utility');
		if (typeof onResponse === 'function')
			onResponse(true);
	});

	/* listen approach
	// adapted from: https://gist.github.com/timoxley/1689041
	var tester = net.createServer();
	
	tester.once('error', function (err) {
		if (err.code != 'EADDRINUSE') 
			return onResponse(err);
		onResponse(null, true)
	});
	
	tester.once('listening', function() {
		tester.once('close', 
					function() { 
						onResponse(null, false);
					});
		tester.close();
	});
	
	tester.listen(port);
	*/
}

///////////////////////////////////////////////////////////////
// for getSystemInfo
///////////////////////////////////////////////////////////////
var fs = require('fs')
realtimeInfo = {
	previousRX: 0,
	previousTX: 0,
	currentRXBPS: 0,
	currentTXBPS: 0,
	disks: [],
	cpu: {},
};

exports.daemon = function(arg) {
	
	if (typeof arg !== 'object' || typeof arg.action !== 'string') {
		LOG.error('cannot start daemon, no arguments or action specified', 'IC.Utility');
		process.exit(0);
		return;
	}
	
	switch (arg.action) {
		case 'startSetInterval':
			setInterval(l_njds, 5000);
			setInterval(l_cpu_realtime_info, 2000);
			break;
		default:
			break;
	}
}


var l_cpu_realtime_info = function(arg) {
	
	
	cpu.cpuUsage( function (input) { realtimeInfo.cpu.cpuUsage = input } );
	cpu.cpuFree( function (input) { realtimeInfo.cpu.cpuFree = input } );
	realtimeInfo.cpu.platform = cpu.platform();
	realtimeInfo.cpu.cpuCount = cpu.cpuCount();
	realtimeInfo.cpu.freemem = cpu.freemem();
	realtimeInfo.cpu.totalmem = cpu.totalmem();
	realtimeInfo.cpu.freememPercentage = cpu.freememPercentage();
	realtimeInfo.cpu.processUptime = cpu.processUptime();
	realtimeInfo.cpu.loadavg = {
		"1": cpu.loadavg(1),
		"5": cpu.loadavg(5),
		"15": cpu.loadavg(15),
	};
}

var l_njds = function(arg) {
	if (process.platform === 'linux') {
		var njds = require('nodejs-disks');
		njds.drives(function(err, drives) {
			njds.drivesDetail(drives, function(err, data) {
				//for(var i = 0; i<data.length; i++) if (data[i].mountpoint === '/dev' || data[i].mountpoint === '/run' || data[i].mountpoint === '/tmp') delete data[i];
				realtimeInfo.disks = data;
			});
		});
	}
	else
	if (os.platform() === "win32") {
		var parse_size = function(size) {
			var ntera = (size / Math.pow(2, 40)).toFixed(2);
			if (ntera > 1) {
				return ntera + " TB";
			}

			var ngiga = (size / Math.pow(2, 30)).toFixed(2);
			if (ngiga > 1) {
				return ngiga + " GB";
			}

			var nmega = (size / Math.pow(2, 20)).toFixed(2);
			if (nmega > 1) {
				return nmega + " MB";
			}

			var nkilo = (size / Math.pow(2, 10)).toFixed(2);
			if (nkilo > 1) {
				return nkilo + " KB";
			}

			return size + " B";
		};

		var property_list = ["deviceid", "freespace", "size"];
		var wmic = require("child_process").spawn("wmic", ["logicaldisk", "get", property_list.join()]);
		var disk_info = "";
		wmic.stdout.on("data", function(data) {
			for (var i = 0; i < data.length; i++) {
				disk_info += String.fromCharCode(data[i]);
			}
		});
		wmic.on("exit", function(code, signal) {
			realtimeInfo.disks = [];
			var disks = disk_info.split("\r\r\n");
			for (var i = 1; i < disks.length - 2; i++) {
				var disk = disks[i].replace(/\s+/g, " ").split(" ");
				var drive = disk[0];

				var available = 0;
				if (disk.length > 1) {
					available = Number(disk[1]);
				}

				var total = 0;
				if (disk.length > 2) {
					total = Number(disk[2]);
				}

				if (total > 0) {
					realtimeInfo.disks.push({
						used: parse_size(total - available),
						available: parse_size(available),
						freePer: Math.round(available / total * 100).toString(),
						usedPer: Math.round((total - available) / total * 100).toString(),
						total: parse_size(total),
						drive: drive
					});
				}
			}
		});

		var netstat = require("child_process").spawn("netstat", ["-e"]);
		var traffic_info = "";
		netstat.stdout.on("data", function(data) {
			for (var i = 0; i < data.length; i++) {
				traffic_info += String.fromCharCode(data[i]);
			}
		});
		netstat.on("exit", function(code, signal) {
			var traffic_in = traffic_info.split("\r\n")[4].replace(/\s+/g, " ").split(" ")[1];
			realtimeInfo.currentRXBPS = Math.round((traffic_in - realtimeInfo.previousRX) / 2);
			realtimeInfo.previousRX = traffic_in;

			var traffic_out = traffic_info.split("\r\n")[4].replace(/\s+/g, " ").split(" ")[2];
			realtimeInfo.currentTXBPS = Math.round((traffic_out - realtimeInfo.previousTX) / 2);
			realtimeInfo.previousTX = traffic_out;
		});
	}

	if (os.platform() === 'linux') {
		fs.readFile('/sys/class/net/eth0/statistics/rx_bytes', 'utf8', function(err, data) {
			var value = parseInt(data);
			if (err) {
				return console.log(err);
			}
			realtimeInfo.currentRXBPS = Math.round((value - realtimeInfo.previousRX) / 2);
			realtimeInfo.previousRX = value;
		});

		fs.readFile('/sys/class/net/eth0/statistics/tx_bytes', 'utf8', function(err, data) {
			var value = parseInt(data);
			if (err) {
				return console.log(err);
			}
			realtimeInfo.currentTXBPS = Math.round((value - realtimeInfo.previousTX) / 2);
			realtimeInfo.previousTX = value;
		});
	}
};

// get a current snapshot of system's hardware
var l_getSystemInfo = exports.getSystemInfo = function() {


		if (process.platform === 'linux') {

		}

		return {
			//title:  process.title,
			gid: process.getgid ? process.getgid() : 'unknown',
			uid: process.getuid ? process.getuid() : 'unknown',
			arch: process.arch,
			osarch: os.arch(),
			platform: process.platform,
			osplatform: os.platform(),
			ostype: os.type(),
			osrelease: os.release(),
			node_ver: process.version,
			start_time: IC.Stat.startTime,
			uptime: process.uptime(),
			hostname: os.hostname(),
			mem_total: os.totalmem(),
			mem_free: os.freemem(),
			mem_proc: IC.sys.inspect(process.memoryUsage()),
			net_in: IC.Stat.get('net_in'),
			net_out: IC.Stat.get('net_out'),
			conn_count: IC.Conn.getConnCount(),
			cpu_load: os.loadavg(),
			cpus: os.cpus(),
			channels: IC.Comm.list().length,
			subscribers: IC.Comm.count(),
			additional: realtimeInfo,
		};

	}
	////////////////////////////////////////////////////

// generate a hash from data, given encryption type
var l_hash = exports.hash = function(data, type) {
	var crypto = require('crypto');
	var dohash = crypto.createHash(type);
	dohash.update(new Buffer(data, 'binary'));
	data = dohash.digest('hex');
	return data;
}

// generate a random integer between 0 and (limit-1)
var l_randInteger = exports.randInteger = function (limit) {
	return Math.floor(Math.random() * limit);	
}

// convert a date to local ISO string
// ref: http://stackoverflow.com/questions/2573521/how-do-i-output-an-iso-8601-formatted-string-in-javascript
var l_localISOString = exports.localISOString = function(date, includeSeconds) {
	function pad(n) {
		return n < 10 ? '0' + n : n
	}
	var localIsoString = date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + 'T' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds());
	if (date.getTimezoneOffset() == 0) localIsoString += 'Z';
	return localIsoString;
};

// test if a string is binary (non-printable characters)
// ref: http://stackoverflow.com/questions/1677644/detect-non-printable-characters-in-javascript
var l_isBinary = exports.isBinary = function(data) {
	return /[\x00-\x1F]/.test(data);
}

// obtain a port from monitor for a local server
// size specifies how many ports to obtain (default: 1)
// if no parameters are given, then return the port(s) already obtained
var l_assignedPorts = [];
var l_getLocalPort = exports.getLocalPort = function (onDone, size) {

	if (typeof onDone === 'undefined') {
		return l_assignedPorts;
	}
	
	var url = 'http://' + IC.Settings.IP_MONITOR + ':' + IC.Settings.PORT_MONITOR + '/getPort' + (size ? '?size=' + size : '');

	LOG.warn('get available port from: ' + url, 'IC.Utility');

	IC.Utility.HTTPget(url, function(res_obj) {
		if (res_obj !== null) {
			
			var port = res_obj.port;
			
			// store ports obtained
			if (typeof port === 'number')
				l_assignedPorts.push(port);
			else {
				for (var i=0; i < port.length; i++)
					l_assignedPorts.push(port[i]);
			}
				
			IC.Utility.safeCall(onDone, port);
		}
		else {
			// get port fail, try to trace
			LOG.stack();
			IC.Utility.safeCall(onDone, 0);
		}
	});
}

// get domain + port for current entry server
// TODO: detect more correctly instead of specifying in settings?
exports.getEntryServer = function (secured) {
	return (secured ? 'https' : 'http') + '://' + IC.Settings.DOMAIN_LOBBY + ':' +
		(secured ? IC.Settings.PORT_ENTRY + 1 : IC.Settings.PORT_ENTRY) + '/';
}

// mix two objects into same object
exports.mixin = require('utils-merge');

// read a JSON file as js object
exports.readJSON = function(path, onDone) {
	var fs = require('fs');
	var file = __dirname + IC.Settings.SLASH + path;

	if (typeof onDone !== 'function')
		onDone = undefined;

	console.log('read JSON from: ' + file);

	fs.readFile(file, 'utf8', function(err, data) {
		if (err) {
			console.log('Error: ' + err);
			if (onDone)
				onDone();
			return;
		}

		try {
			data = JSON.parse(data);
		}
		catch (e) {
			console.log('Error: ' + e);
			throw e;
			if (onDone)
				onDone();
			return
		}
		console.dir(data);

		if (onDone)
			onDone(data);
	});
}

// read & write ImonCloud files (relative to ImonCloud core directory)
var l_readFile = exports.readFile = function(path, onDone) {

	path = __dirname + IC.Settings.SLASH + path;
	LOG.sys('reading file: ' + path, 'IC.Utility');
	IC.fs.readFile(path, 'utf-8', function(err, data) {
		if (err) {
			LOG.error(err, 'IC.Utility');
			IC.Utility.safeCall(onDone);
		}
		else {
			LOG.sys('read file success: ' + path, 'IC.Utility');
			IC.Utility.safeCall(onDone, data);
		}
	});
}

var l_writeFile = exports.writeFile = function(path, file, onDone) {

	path = __dirname + IC.Settings.SLASH + path;
	LOG.sys('writing file: ' + path, 'IC.Utility');
	IC.fs.writeFile(path, file, 'utf-8', function(err) {
		if (err) {
			LOG.error(err, 'IC.Utility');
			IC.Utility.safeCall(onDone, false);
		}
		else {
			LOG.sys('file write success: ' + path, 'IC.Utility');
			IC.Utility.safeCall(onDone, true);
		}
	});
}

// read & write ImonCloud config
exports.readSystemConfig = function(onDone) {
	l_readFile('..' + IC.Settings.SLASH + '..' + IC.Settings.SLASH + 'config.js', onDone);
}

exports.writeSystemConfig = function(file, onDone) {
	l_writeFile('..' + IC.Settings.SLASH + '..' + IC.Settings.SLASH + 'config.js', file, onDone);
}

///////////////////////////////////
// get a JSON with date and time
// input: {}
// example: 
// output: JSON with date and time
///////////////////////////////////
var l_getDateTimeJson = exports.getDateTimeJson = function(d) {
	if (d) var date = new Date(d);
	else var date = new Date();
	var hour = date.getHours();
	hour = (hour < 10 ? "0" : "") + hour;
	var min = date.getMinutes();
	min = (min < 10 ? "0" : "") + min;
	var sec = date.getSeconds();
	sec = (sec < 10 ? "0" : "") + sec;
	var year = date.getFullYear();
	var month = date.getMonth() + 1;
	month = (month < 10 ? "0" : "") + month;
	var day = date.getDate();
	day = (day < 10 ? "0" : "") + day;
	var timeObj = {
		"year": parseInt(year),
		"month": parseInt(month),
		"monthday": parseInt(day),
		"weekday": date.getDay(),
		"hour": parseInt(hour),
		"minute": parseInt(min),
		"second": parseInt(sec)
	};
	//console.log("date.getDay: " + date.getDay());
	switch (date.getDay()) {
		case 0:
			timeObj.weekDay = 'sunday';
			break;
		case 1:
			timeObj.weekDay = 'monday';
			break;
		case 2:
			timeObj.weekDay = 'tuesday';
			break;
		case 3:
			timeObj.weekDay = 'wednesday';
			break;
		case 4:
			timeObj.weekDay = 'thursday';
			break;
		case 5:
			timeObj.weekDay = 'friday';
			break;
		case 6:
			timeObj.weekDay = 'saturday';
			break;
		default:
			console.log("error code: xxxxxxxx");
			break;
	}
	return timeObj;
}

exports.getDateTimeTS = function(arg) {
	var x = l_getDateTimeJson(arg);
	var result = {
		Y: x.year.toString(),
		M: x.month.toString(),
		D: x.monthday.toString(),
		h: x.hour.toString(),
		m: x.minute.toString(),
		s: x.second.toString()
	};
	if (result.M.length === 1) result.M = '0' + result.M;
	if (result.D.length === 1) result.D = '0' + result.D;
	if (result.h.length === 1) result.h = '0' + result.h;
	if (result.m.length === 1) result.m = '0' + result.m;
	if (result.s.length === 1) result.s = '0' + result.s;
	//console.log("result " + result);
	return result.Y + result.M + result.D + '-' + result.h + result.m + result.s;
}


///////////////////////////// stable
// clean 'null' elements for an array
// input: array
// output: array
/////////////////////////////
var cleanArray = exports.cleanArray = function(actual) {
	if (!actual) {
		console.log("no input array");
		return false;
	}

	if (typeof(actual) !== 'object') {
		console.log("input is not ");
		return false;
	}

	var newArray = new Array();
	for (var i = 0; i < actual.length; i++) {
		if (actual[i]) {
			newArray.push(actual[i]);
		}
	}
	return newArray;
}



// http://stackoverflow.com/questions/5827612/node-js-fs-readdir-recursive-directory-search
//////////////////////////////
// multi-purpose find (-- walk a file hierarchy) cross-platform(pure nodejs version) 
// 此功能用來取代 linux find 指令
// input: {path: "path", onDone: function(){}, option: "lengthOfFilename atime mtime ctime filesize"}
// output: []
//////////////////////////////
// recursive file list 
var fs = require('fs');
var path = require('path');

var walk = function(dir, done) {
	var results = [];
	fs.readdir(dir, function(err, list) {
		if (err) {
			return done(err);
		}

		var pending = list.length;
		if (!pending) {
			return done(null, results);
		}

		list.forEach(function(file) {
			//file = dir + '/' + file;
			file = dir + IC.Settings.SLASH + file;
			fs.stat(file, function(err, stat) {
				if (stat && stat.isDirectory()) {
					walk(file, function(err, res) {
						results = results.concat(res);
						if (!--pending) {
							done(null, results);
						}
					});
				}
				else {
					results.push({
						file: file,
						stat: stat
					});
					if (!--pending) {
						done(null, results);
					}
				}
			});
		});
	});
};


exports.findFiles = function(arg) {
	LOG.debug("in findFiles", 'IC.Utility');
	LOG.debug(arg, 'IC.Utility');
	if (!arg) {
		console.log("error: no arg");
		return;
	}

	if (!arg.path) {
		console.log("error: no arg.path");
		return;
	}

	if (!arg.onDone) {
		console.log("error: no arg.onDone");
		return;
	}

	if (typeof arg.onDone !== 'function') {
		console.log("error: arg.onDone is not a function");
		return;
	}

	walk(arg.path, function(err, results) {
		if (err) {
			//throw err;
			console.log("error: path exists?");
			arg.onDone(["error: path exists?"]);
			return;
		}
		//console.log(results);

		var r = undefined;

		if (arg.sortOption) {

			r = results.sort(function(a, b) {
				if (!a) return 0;
				if (!b) return 0;
				switch (arg.sortOption) {
					case 'filenameLocale':
						return a.file.localeCompare(b.file);
						break;
					case 'filename':
						return a.file - b.file; // length of filename
						break;
					case 'lengthOfFilename':
						return a.file.length - b.file.length; // length of filename
						break;
					case 'atime':
						return a.stat.atime - b.stat.atime; // access time of file
						break;
					case 'mtime':
						if (!a.stat) return 0;
						if (!b.stat) return 0;
						if (!a.stat.mtime) return 0;
						if (!b.stat.mtime) return 0;
						return a.stat.mtime - b.stat.mtime; // modification time of file
						break;
						// http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime
						// ctime: ctime is the inode or file change time. The ctime gets updated when the file attributes are changed, like changing the owner, changing the permission or moving the file to an other filesystem but will also be updated when you modify a file.
						// mtime: mtime is the file modify time. The mtime gets updated when you modify a file. Whenever you update content of a file or save a file the mtime gets updated.
						// atime: atime is the file access time. The atime gets updated when you open a file but also when a file is used for other operations like grep, sort, cat, head, tail and so on.
					case 'ctime':
						return a.stat.ctime - b.stat.ctime; // creation time of file
						break;
					case 'filesize':
						return a.stat.size - b.stat.size; // size of file
						break;
					default:
						break;
				}
			});
		}
		else {
			console.log("no sortOption");
		}
		//console.log(r);

		for (var i in r) {
			if (arg.rexmatch) {
				if (r[i].file.match(arg.rexmatch)) {}
				else {
					//console.log("delete: ");
					//console.log(r[i]);
					delete r[i];
				}
			}

			if (r[i] && r[i].stat && arg.ctime && arg.ctime.start && arg.ctime.end) {
				if (r[i].stat.ctime.getTime() >= arg.ctime.start.getTime() && r[i].stat.ctime.getTime() <= arg.ctime.end.getTime()) {}
				else {
					//console.log("delete: ");
					//console.log(r[i]);
					delete r[i];
				}
			}

			if (r[i] && r[i].stat && arg.mtime && arg.mtime.start && arg.mtime.end) {
				if (r[i].stat.mtime.getTime() >= arg.mtime.start.getTime() && r[i].stat.mtime.getTime() <= arg.mtime.end.getTime()) {}
				else {
					//console.log("delete: ");
					//console.log(r[i]);
					delete r[i];
				}
			}
		}
		//console.log(r);

		r = cleanArray(r);
		if (arg.reverse && arg.reverse === true) {
			r = r.reverse();
		}

		if (arg.limit && typeof arg.limit === 'number') {
			var re = [];
			for (var i in r) {
				if (i > arg.limit - 1) {
					break;
				}
				re.push(r[i]);
			}
			r = re;
		}

		if (arg.outputFilenameOnly && arg.outputFilenameOnly === true) {
			var re = [];
			for (var i in r) {
				re.push(r[i].file);
			}
			r = re;
		}


		arg.onDone(r);
	});
};



/* Array.prototype.getUnique = function(){
   var u = {}, a = [];
   for(var i = 0, l = this.length; i < l; ++i){
      if(u.hasOwnProperty(this[i])) {
         continue;
      }
      a.push(this[i]);
      u[this[i]] = 1;
   }
   return a;
} */


//var fs = require('fs');
//var path = require('path');
exports.mkdirParent = function(dirPath, mode, callback) {
	if (!dirPath) {
		console.log("no input path");
		return false;
	}
	fs.mkdirParent = function(dirPath, mode, callback) {
		//Call the standard fs.mkdir
		fs.mkdir(dirPath, mode, function(error) {
			//When it fail in this way, do the custom steps
			if (error && error.errno === 34) {
				//Create all the parents recursively
				fs.mkdirParent(path.dirname(dirPath), mode, callback);
				//And then the directory
				fs.mkdirParent(dirPath, mode, callback);
			}
			//Manually run the callback since we used our own callback to do all these
			callback && callback(error);
		});
	};
}

////////////////////////////////////////
// to decide which partition from given path
// 
//
////////////////////////////////////////
exports.whichPartition = function(arg) {

	if (!arg) {
		console.log("no input, ic_utility.js 1274");
		return false;
	}


	if (typeof(arg) !== 'object') {
		console.log("incorrect arg, ic_utility.js 1279");
		return false;
	}

	if (!arg.onDone) {
		console.log("in whichPartition: no onDone");
		return false;
	}

	if (arg.onDone !== 'function') {
		console.log("in whichPartition: onDone is not a function");
		return false;
	}

	var paths = " ";
	for (var i in arg) {
		if (typeof(arg[i]) === "string")
			paths = paths + arg[i] + " ";
	}
	//console.log("paths");
	//console.log(paths);

	//var spawn = require('child_process').spawn;
	var exec = require('child_process').exec;
	if (process.platform === 'linux') {
		exec("df -TP " + paths, function(err, stdout, stderr) {
			if (err) {
				console.log("ic_utility.js error 12541292");
				console.log(err);
			}
			else {
				var partitions = [];
				var partitionTemp1 = stdout.split(" ");
				var partitionTemp2 = [];
				for (var i in partitionTemp1) {
					partitionTemp2[i] = partitionTemp1[i].split('\n');
				}
				//console.log("partitionTemp");
				for (var i in partitionTemp2) {
					for (var j in partitionTemp2[i]) {
						if (partitionTemp2[i][j].match(/\//) > -1) {}
						else {
							if (partitions.indexOf(partitionTemp2[i][j]) === -1) {
								partitions.push(partitionTemp2[i][j]);
							}
						}
					}
				}
				//console.log(partitions);
				if (arg.onDone) arg.onDone(partitions);
				return partitions;
			}
		});
	}
}
*/
